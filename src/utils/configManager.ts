import * as vscode from 'vscode'
import * as path from 'node:path'
import * as fs from 'node:fs'

export interface WebDriverIOConfig {
    configPath: string
    testFilePattern: string
    showOutput: boolean
}

/**
 * Load WebDriverIO configuration settings
 */
export function loadConfig(): WebDriverIOConfig {
    const config = vscode.workspace.getConfiguration('webdriverio-runner')

    return {
        configPath: config.get<string>('configPath') || 'wdio.conf.js',
        testFilePattern: config.get<string>('testFilePattern') || '**/*.spec.js,**/*.test.js,**/*.spec.ts,**/*.test.ts',
        showOutput: config.get<boolean>('showOutput') || true,
    }
}

/**
 * Find WebDriverIO configuration file
 */
export function findWdioConfig(workspaceRoot: string): string | null {
    // Check common config file names
    const commonConfigNames = ['wdio.conf.js', 'wdio.conf.ts', 'wdio.config.js', 'wdio.config.ts']

    for (const configName of commonConfigNames) {
        const configPath = path.join(workspaceRoot, configName)
        if (fs.existsSync(configPath)) {
            return configPath
        }
    }

    // Check for config in test directory
    const testDirs = ['test', 'tests', 'e2e', 'spec', 'specs']
    for (const dir of testDirs) {
        for (const configName of commonConfigNames) {
            const configPath = path.join(workspaceRoot, dir, configName)
            if (fs.existsSync(configPath)) {
                return configPath
            }
        }
    }

    // Nothing found
    return null
}

/**
 * Generate a default WebDriverIO config file
 */
export function generateDefaultConfig(workspaceRoot: string): string {
    const configPath = path.join(workspaceRoot, 'wdio.conf.js')

    // Check if file already exists
    if (fs.existsSync(configPath)) {
        return configPath
    }

    // Generate default config using wdio config command
    // This would be implemented through child_process
    // For simplicity, we just provide a basic template here
    const configTemplate = `// WebDriverIO configuration file
// Generated by WebDriverIO Runner extension
exports.config = {
    runner: 'local',
    specs: [
        './test/**/*.spec.js'
    ],
    exclude: [],
    maxInstances: 10,
    capabilities: [{
        maxInstances: 5,
        browserName: 'chrome',
        acceptInsecureCerts: true
    }],
    logLevel: 'info',
    bail: 0,
    baseUrl: 'http://localhost',
    waitforTimeout: 10000,
    connectionRetryTimeout: 120000,
    connectionRetryCount: 3,
    framework: 'mocha',
    reporters: ['spec'],
    mochaOpts: {
        ui: 'bdd',
        timeout: 60000
    }
}`

    // Write config file
    fs.writeFileSync(configPath, configTemplate, 'utf8')

    return configPath
}
